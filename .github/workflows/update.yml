name: Update ICS (Europe/Berlin)

on:
  schedule:
    - cron: "0 */6 * * *"      # alle 6h (UTC) – bei Bedarf z.B. "0 * * * *" für stündlich
  workflow_dispatch:

permissions:
  contents: write              # für Commit/Push erforderlich

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Holt die ICS mit Retries; bricht bei 500 NICHT ab,
      # sondern setzt valid=false und behält die letzte gute Datei.
      - name: Fetch ICS with retries (non-fatal on 500)
        id: fetch
        env:
          SOURCE_ICS_URL: ${{ secrets.SOURCE_ICS_URL }}
        run: |
          set -e
          echo "Fetching $SOURCE_ICS_URL"

          # Cache-Buster gegen launische Caches/Server
          TS=$(date +%s)
          URL="$SOURCE_ICS_URL"
          case "$URL" in
            *\?*) URL="${URL}&nocache=${TS}" ;;
            *)    URL="${URL}?nocache=${TS}" ;;
          esac

          # Versuch 1: freundliche Header + Retries
          curl -fsSL \
            -H "Accept: text/calendar" \
            -H "Cache-Control: no-cache" \
            -A "Mozilla/5.0 (compatible; ICSFetcher/1.0)" \
            --retry 6 --retry-delay 10 --retry-all-errors --retry-connrefused \
            "$URL" -o source.ics || true

          # Fallback: alternative Header/Agent
          if [ ! -s source.ics ]; then
            echo "Try #1 failed, trying alternative headers/agent..."
            curl -fsSL \
              -H "Accept: */*" \
              -H "Pragma: no-cache" \
              -A "curl/8.x github-actions" \
              --retry 6 --retry-delay 10 --retry-all-errors --retry-connrefused \
              "$URL" -o source.ics || true
          fi

          # Validierung: nur echte ICS akzeptieren
          if [ -s source.ics ] && head -n 1 source.ics | grep -q "BEGIN:VCALENDAR"; then
            echo "valid=true" >> $GITHUB_OUTPUT
          else
            echo "WARN: Keine gültige ICS (500/HTML?). Behalte letzte Version."
            echo "valid=false" >> $GITHUB_OUTPUT
          fi

      # Zeitzone normalisieren – nur wenn der Fetch eine gültige ICS geliefert hat
      - name: Normalize timezone to Europe/Berlin
        if: steps.fetch.outputs.valid == 'true'
        run: |
          sed -e 's/TZID:W\. Europe Standard Time/TZID:Europe\/Berlin/g' \
              -e 's/DTSTART;TZID=W\. Europe Standard Time/DTSTART;TZID=Europe\/Berlin/g' \
              -e 's/DTEND;TZID=W\. Europe Standard Time/DTEND;TZID=Europe\/Berlin/g' \
              source.ics > konfi.ics

          # Optional: X-WR-TIMEZONE ergänzen, falls nicht vorhanden
          if ! grep -q "^X-WR-TIMEZONE:" konfi.ics; then
            awk '1; /^X-WR-CALNAME:/ {print "X-WR-TIMEZONE:Europe/Berlin"}' konfi.ics > tmp && mv tmp konfi.ics
          fi

      # Commit nur, wenn sich die Datei geändert hat – und nur bei gültigem Fetch
      - name: Commit updated ICS (only if changed and valid)
        if: steps.fetch.outputs.valid == 'true'
        run: |
          set -e
          git config user.name  "calendar-bot"
          git config user.email "bot@example.com"
          if [ ! -f konfi.ics ] || ! git diff --quiet -- konfi.ics 2>/dev/null; then
            git add konfi.ics
            git commit -m "Update ICS (auto)"
            git push
          else
            echo "No changes."
          fi

